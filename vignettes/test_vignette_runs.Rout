
R version 4.4.0 (2024-04-24 ucrt) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> set.seed(2023)
> library(tidyverse, quietly = TRUE)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
Warning messages:
1: package 'tidyverse' was built under R version 4.4.1 
2: package 'ggplot2' was built under R version 4.4.1 
3: package 'tibble' was built under R version 4.4.1 
4: package 'tidyr' was built under R version 4.4.1 
5: package 'readr' was built under R version 4.4.1 
6: package 'purrr' was built under R version 4.4.1 
7: package 'dplyr' was built under R version 4.4.1 
8: package 'stringr' was built under R version 4.4.1 
9: package 'forcats' was built under R version 4.4.1 
10: package 'lubridate' was built under R version 4.4.1 
> devtools::load_all("..")
ℹ Loading invivoPKfit
Warning message:
package 'testthat' was built under R version 4.4.1 
> 
> datadir <- "C:/Users/cring/OneDrive - Environmental Protection Agency (EPA)/invivopkfit work/fitfiles"
> 
> #set up table of fitting options
> fitopts <- expand.grid(error_model = c("pooled",
+                                        "hierarchical"),
+                        dose_norm = c(TRUE, FALSE),
+                        log10_trans = c(TRUE, FALSE),
+                        time_scale = c(TRUE, FALSE),
+                        stringsAsFactors = FALSE)
> 
> #function to apply to each set of fitting options
> fit_data <- function(this_error_model,
+                      this_dose_norm,
+                      this_log10_trans,
+                      this_time_scale,
+                      n_cores = 12){
+   #intiiate return value of -9. If this is not changed to 0 or -1, it means something really weird happeened
+   retval <- -9
+ 
+   #set numeric versions of fitting options
+   #e.g. 000p means no transformations, pooled error model
+   #100p emans dose-norm only, pooled error model
+   #010p means log-trans only, pooled
+   #001p means time-scale only, pooled
+   #etc
+   dose_indic <- as.numeric(this_dose_norm)
+   log10_indic <- as.numeric(this_log10_trans)
+   time_indic <- as.numeric(this_time_scale)
+   errmodel_indic <- substr(this_error_model, 1, 1)
+ 
+   #put together a filename
+   #e.g. pkfit_000p.Rds, pkfit_010h.Rds, etc. etc.
+   file_str <- paste0("pkfit_",
+                      dose_indic,
+                      log10_indic,
+                      time_indic,
+                      errmodel_indic,
+                      ".Rds")
+  #print file string to show which analysis is currently occuring
+   print(file_str)
+ 
+   tryCatch({
+     this_pk <- pk(data = cvt,
+                                   mapping = ggplot2::aes(
+                                     Chemical = analyte_dtxsid,
+                                     Chemical_Name = analyte_name_original,
+                                     DTXSID = analyte_dtxsid,
+                                     CASRN = analyte_casrn,
+                                     Species = species,
+                                     Reference = document_id,
+                                     Media = conc_medium_normalized,
+                                     Route = administration_route_normalized,
+                                     Dose = dose_level_normalized,
+                                     Dose.Units = "mg/kg",
+                                     Subject_ID = subject_id,
+                                     Series_ID = series_id,
+                                     Study_ID = study_id,
+                                     ConcTime_ID = conc_time_id,
+                                     N_Subjects = n_subjects_in_series,
+                                     Weight = weight_kg,
+                                     Weight.Units = "kg",
+                                     Time = time_hr,
+                                     Time.Units = "hours",
+                                     Value = conc,
+                                     Value.Units = "mg/L",
+                                     Value_SD = conc_sd_normalized,
+                                     LOQ = loq
+                                   )) +
+       facet_data(vars(Chemical, Species)) +
+       settings_preprocess(keep_data_original = FALSE,
+                           suppress.messages = TRUE) +
+       scale_conc(dose_norm = this_dose_norm,
+                  log10_trans = this_log10_trans) +
+       settings_optimx(method = c("L-BFGS-B",
+                                  "bobyqa"))
+ 
+     if(this_error_model %in% "pooled"){
+       this_pk <- this_pk +
+         stat_error_model(error_group = vars(Chemical, Species))
+     } else if(this_error_model %in% "hierarchical"){
+       this_pk <- this_pk +
+         stat_error_model(error_group = vars(Chemical, Species, Reference))
+     } else{
+       stop("this_error_model must be either 'pooled' or 'hierarchical'")
+     }
+ 
+     if(this_time_scale %in% TRUE){
+       this_pk <- this_pk +
+         scale_time(new_units = "auto")
+     }
+ 
+     #do the fit
+     this_time <- system.time(this_fit <- do_fit(this_pk, n_cores = n_cores))
+ 
+     print(this_time)
+ 
+     #save the result
+     saveRDS(this_fit,
+             paste0(datadir, "/",
+                    file_str))
+ 
+     #return 0 to indicate successful completion
+     retval <- 0
+   },
+   error = function(e){
+     message(paste("Analysis",
+                   file_str,
+                   "failed with error",
+                   e))
+     #return -1 to indicate fail with error
+     retval <- -1
+   }
+   )
+ 
+   return(retval)
+ }
> 
> #use mapply to call the function for each set of fitting options in turn,
> #and save the resulting fitted pk object for later analysis
> system.time(tmp <- mapply(fit_data,
+                           this_error_model = fitopts$error_model,
+                           this_dose_norm = fitopts$dose_norm,
+                           this_log10_trans = fitopts$log10_trans,
+                           this_time_scale = fitopts$time_scale))
[1] "pkfit_111p.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
  13.69    3.26 3959.77 
[1] "pkfit_111h.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species, Reference)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
  13.13    2.59 3323.40 
[1] "pkfit_011p.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
  18.69    3.21 2812.75 
[1] "pkfit_011h.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species, Reference)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
  19.34    2.90 3045.40 
[1] "pkfit_101p.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
  18.20    2.98 2305.78 
[1] "pkfit_101h.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species, Reference)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
  16.69    3.11 2331.17 
[1] "pkfit_001p.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
  11.06    2.80 3097.46 
[1] "pkfit_001h.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species, Reference)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
  13.56    3.59 3524.61 
[1] "pkfit_110p.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
   6.30    2.70 1933.45 
[1] "pkfit_110h.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species, Reference)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
   6.41    2.75 1892.67 
[1] "pkfit_010p.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
   6.83    2.59 1664.58 
[1] "pkfit_010h.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species, Reference)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
   6.83    2.62 1823.65 
[1] "pkfit_100p.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
  11.64    2.52 1748.90 
[1] "pkfit_100h.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species, Reference)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
   6.91    2.94 1768.75 
[1] "pkfit_000p.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
   7.33    3.31 1912.70 
[1] "pkfit_000h.Rds"
settings_preprocess(keep_data_original = FALSE, suppress.messages = TRUE): settings_preprocess already present; new settings_preprocess will replace the existing one
settings_optimx(method = c("L-BFGS-B", "bobyqa")): settings_optimx already present; new settings_optimx will replace the existing one
stat_error_model(error_group = vars(Chemical, Species, Reference)): stat_error_model already present; new stat_error_model will replace the existing one
do_fit.pk(): Trying to divide processes into 12 processing cores
do_fit.pk():To ensure other programs & processes are still able to run, n_cores has been set to 11
do_fit.pk(): 11 processing cores allocated.
do_fit.pk(): Now converting all rate constants to units of 1/hour, in case time has been scaled to units other than hours before fitting
Joining with `by = join_by(Chemical, Species, model, param_units, param_name)`
do_fit.pk: Fitting complete
   user  system elapsed 
  11.47    2.46 2556.64 
    user   system  elapsed 
  195.16    46.85 39722.88 
> 
> proc.time()
    user   system  elapsed 
  195.81    47.10 39732.73 
