ratio_1_tan <- nrow(full_data_1_tan) / nrow(full_data_1 %>% filter(!is.na(cp_norm)))
###########
###########
full_data_2 <- split_full_data$`2compartment`
### Find number of points in each plot panel for 2-compartment
full_data_2_center <- full_data_2 %>% filter(conc_norm >= 0.5 & conc_norm <= 2)
full_data_2_center <- full_data_2_center %>% filter(cp_norm >= 0.5 & cp_norm <= 2)
ratio_2_center <- nrow(full_data_2_center) / nrow(full_data_2 %>% filter(!is.na(cp_norm)))
full_data_2_green <- full_data_2 %>% filter(conc_norm < 0.5 | conc_norm > 2)
full_data_2_green <- full_data_2_green %>% filter(cp_norm < 0.5 | cp_norm > 2)
ratio_2_green <- nrow(full_data_2_green) / nrow(full_data_2 %>% filter(!is.na(cp_norm)))
full_data_2_gray <- full_data_2 %>% filter(conc_norm < 0.5 | conc_norm > 2)
full_data_2_gray <- full_data_2_gray %>% filter(cp_norm >= 0.5 & cp_norm <= 2)
ratio_2_gray <- nrow(full_data_2_gray) / nrow(full_data_2 %>% filter(!is.na(cp_norm)))
full_data_2_tan <- full_data_2 %>% filter(conc_norm >= 0.5 & conc_norm <= 2)
full_data_2_tan <- full_data_2_tan %>% filter(cp_norm < 0.5 | cp_norm > 2)
ratio_2_tan <- nrow(full_data_2_tan) / nrow(full_data_2 %>% filter(!is.na(cp_norm)))
###########
###########
full_data_flat <- split_full_data$`flat`
### Find number of points in each plot panel for 2-compartment
full_data_flat_center <- full_data_flat %>% filter(conc_norm >= 0.5 & conc_norm <= 2)
full_data_flat_center <- full_data_flat_center %>% filter(cp_norm >= 0.5 & cp_norm <= 2)
ratio_flat_center <- nrow(full_data_flat_center) / nrow(full_data_flat %>% filter(!is.na(cp_norm)))
full_data_flat_green <- full_data_flat %>% filter(conc_norm < 0.5 | conc_norm > 2)
full_data_flat_green <- full_data_flat_green %>% filter(cp_norm < 0.5 | cp_norm > 2)
ratio_flat_green <- nrow(full_data_flat_green) / nrow(full_data_flat %>% filter(!is.na(cp_norm)))
full_data_flat_gray <- full_data_flat %>% filter(conc_norm < 0.5 | conc_norm > 2)
full_data_flat_gray <- full_data_flat_gray %>% filter(cp_norm >= 0.5 & cp_norm <= 2)
ratio_flat_gray <- nrow(full_data_flat_gray) / nrow(full_data_flat %>% filter(!is.na(cp_norm)))
full_data_flat_tan <- full_data_flat %>% filter(conc_norm >= 0.5 & conc_norm <= 2)
full_data_flat_tan <- full_data_flat_tan %>% filter(cp_norm < 0.5 | cp_norm > 2)
ratio_flat_tan <- nrow(full_data_flat_tan) / nrow(full_data_flat %>% filter(!is.na(cp_norm)))
###########
###########
###########
# rect_df1 <- data.frame(xmin = c(0, 0, 2, 2, 0, 2, 0.5, 0.5),
#                       xmax = c(0.5, 0.5, Inf, Inf, 0.5, Inf, 2, 2),
#                       ymin = c(2, 0, 0, 2, 0.5, 0.5, 2, 0),
#                       ymax = c(Inf, 0.5, 0.5, Inf, 2, 2, Inf, 0.5),
#                       panel_key = c(paste("Poor Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_1_green, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                     paste("Poor Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_1_green, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                     paste("Poor Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_1_green, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                     paste("Poor Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_1_green, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                     paste("Good Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_1_tan, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                     paste("Good Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_1_tan, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                    paste("Poor Fit, Typical Data",
#                                           paste("(", round(100 * ratio_1_gray, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                    paste("Poor Fit, Typical Data",
#                                           paste("(", round(100 * ratio_1_gray, digits = 1), "%", ")", sep = ""),
#                                           sep = " ")))
#
# rect_df2 <- data.frame(xmin = c(0, 0, 2, 2, 0, 2, 0.5, 0.5),
#                       xmax = c(0.5, 0.5, Inf, Inf, 0.5, Inf, 2, 2),
#                       ymin = c(2, 0, 0, 2, 0.5, 0.5, 2, 0),
#                       ymax = c(Inf, 0.5, 0.5, Inf, 2, 2, Inf, 0.5),
#                       panel_key = c(paste("Poor Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_2_green, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                     paste("Poor Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_2_green, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                     paste("Poor Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_2_green, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                     paste("Poor Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_2_green, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                     paste("Good Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_2_tan, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                     paste("Good Fit, Outlier Data",
#                                           paste("(", round(100 * ratio_2_tan, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                    paste("Poor Fit, Typical Data",
#                                           paste("(", round(100 * ratio_2_gray, digits = 1), "%", ")", sep = ""),
#                                           sep = " "),
#                                    paste("Poor Fit, Typical Data",
#                                           paste("(", round(100 * ratio_2_gray, digits = 1), "%", ")", sep = ""),
#                                           sep = " ")))
#
#
# rect_p1 <- ggplot() +
#   geom_rect(data = rect_df1, aes(xmin = xmin,
#                                 ymin = ymin,
#                                 xmax = xmax,
#                                 ymax = ymax,
#                                 fill = panel_key),
#             alpha = 0.3, inherit.aes = FALSE) +
#   scale_fill_manual(name = "Panel Key",
#                     values = c("#361D2E",
#                                "#86A397",
#                                "#E1B07E")) +
#   theme_bw() +
#   theme(panel.spacing = unit(2, "lines")) +
#   geom_vline(xintercept = c(0.5, 2),
#              linetype = "dashed") +
#   geom_hline(yintercept = c(0.5, 2),
#              linetype = "dashed") +
#   scale_x_log10() +
#   scale_y_log10() +
#   labs(x = "Data Variability",
#        y = "Model Error") +
#   guides(fill = guide_legend(override.aes = list(size = 0.1)))
#
# rect_p2 <- ggplot() +
#   geom_rect(data = rect_df2, aes(xmin = xmin,
#                                 ymin = ymin,
#                                 xmax = xmax,
#                                 ymax = ymax,
#                                 fill = panel_key),
#             alpha = 0.3, inherit.aes = FALSE) +
#   scale_fill_manual(name = "Panel Key",
#                     values = c("#361D2E",
#                                "#86A397",
#                                "#E1B07E")) +
#   theme_bw() +
#   theme(panel.spacing = unit(2, "lines")) +
#   geom_vline(xintercept = c(0.5, 2),
#              linetype = "dashed") +
#   geom_hline(yintercept = c(0.5, 2),
#              linetype = "dashed") +
#   scale_x_log10() +
#   scale_y_log10() +
#   labs(x = "Data Variability",
#        y = "Model Error") +
#   guides(fill = guide_legend(override.aes = list(size = 0.1)))
#
# ###################
# fill_legend1 <- get_legend(rect_p1)
# fill_legend2 <- get_legend(rect_p2)
# ##################
p <- ggplot(data = full_data,
mapping = aes(x = conc_norm, y = cp_norm)) +
annotate(geom = "rect", xmin = 0, xmax = 0.5, ymin = 2, ymax = Inf, alpha = 0.3, fill = "#86A397") +
annotate(geom = "rect", xmin = 0, xmax = 0.5, ymin = 0, ymax = 0.5, alpha = 0.3, fill = "#86A397") +
annotate(geom = "rect", xmin = 2, xmax = Inf, ymin = 0, ymax = 0.5, alpha = 0.3, fill = "#86A397") +
annotate(geom = "rect", xmin = 2, xmax = Inf, ymin = 2, ymax = Inf, alpha = 0.3, fill = "#86A397") +
annotate(geom = "rect", xmin = 0, xmax = 0.5, ymin = 0.5, ymax = 2, alpha = 0.3, fill = "#361D2E") +
annotate(geom = "rect", xmin = 2, xmax = Inf, ymin = 0.5, ymax = 2, alpha = 0.3, fill = "#361D2E") +
annotate(geom = "rect", xmin = 0.5, xmax = 2, ymin = 2, ymax = Inf, alpha = 0.3, fill = "#E1B07E") +
annotate(geom = "rect", xmin = 0.5, xmax = 2, ymin = 0, ymax = 0.5, alpha = 0.3, fill = "#E1B07E") +
annotate(geom = "rect", xmin = 0.5, xmax = 2, ymin = 0.5, ymax = 2.0, alpha = 0.5, fill = "black") +
theme_bw() +
theme(panel.spacing = unit(2, "lines")) +
geom_bin2d(bins = 100) +
scale_fill_distiller(palette = "Blues") +
geom_vline(xintercept = c(0.5, 2),
linetype = "dashed") +
geom_hline(yintercept = c(0.5, 2),
linetype = "dashed") +
scale_x_log10() +
scale_y_log10() +
labs(x = "Data Variability",
y = "Model Performance") +
facet_wrap(. ~ model)
p
# ##################
#
# data_p_final <- data_p +
#   # inset_element(fill_legend1, 0.1, 1, 0.5, 1) +
#   inset_element(fill_legend2, 0.6, 0.5, 0.7, 0.2, clip = TRUE)
#
# data_p_final
53+2.5+10+35
p
devtools::load_all(".")
devtools::load_all(".")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(results = TRUE)
knitr::opts_chunk$set(message = FALSE)
data <- read.csv("inst/ext/cvt_query_for_john_27may2021_v2.csv")
data <- read.csv("inst/ext/cvt_query_for_john_27may2021_v2.csv")
data <- read.csv("inst/ext/cvtdb_invivopkfit_02242022.csv")
data <- read.csv("inst/ext/cvt_query_for_john_27may2021_v2.csv")
data <- read.csv("inst/ext/cvtdb_invivopkfit_02242022.csv")
### fix compound names
data$analyte_name_original[data$analyte_name_original == "Methyleugonal "] <- "Methyleugonal"
data$analyte_name_original[data$analyte_name_original == "benzo[a]pyrene"] <- "benzo(a)pyrene"
data$analyte_name_original[data$analyte_name_original == "2,4-D"] <- "2,4-Dichlorophenoxyacetic acid"
data$analyte_name_original[data$analyte_name_original == "Diclofenac"] <- "Hexobarbital"
data$analyte_name_original[data$analyte_name_original == "Pentadecafluorooctanoic acid"] <- "Perfluorooctanoic acid"
### make fk_reference_document equal fk_extraction document if fk_reference_document is NULL
data$fk_reference_document_id[data$fk_reference_document_id == "NULL"] <- data$fk_extraction_document_id[data$fk_reference_document_id == "NULL"]
### do 1-Compartment fit
system.time(PK.fit.table.1comp <- fit_all(
data.set = data,
model = "1compartment",
modelfun = "analytic",
compound.col = "analyte_name_original",
cas.col = "dsstox_casrn",
reference.col = "fk_reference_document_id",
species.col = "species",
species.weight.col = "weight_kg",
species.weight.units.default = "kg",
dose.col = "dose_level_normalized",
time.col = "time_hr",
time.units.default = "hr",
media.col = "conc_medium_normalized",
media.units.default = "normalized",
value.col = "conc",
units.default = NA,
route.col = "administration_route_normalized",
source.col = "document_id",
loq.default = NA,
subject.default = NA,
info.default = NA,
ratio.data.to.dose = 0.001
))
system.time(PK.fit.table.1comp <- fit_all(
data.set = data,
model = "1compartment",
modelfun = "analytic",
compound.col = "analyte_name_original",
cas.col = "dsstox_casrn",
reference.col = "fk_reference_document_id",
species.col = "species",
species.weight.col = "weight_kg",
species.weight.units.default = "kg",
dose.col = "dose_level_normalized",
time.col = "time_hr",
time.units.default = "hr",
media.col = "conc_medium_normalized",
media.units.default = "normalized",
value.col = "conc",
units.default = NA,
route.col = "administration_route_normalized",
source.col = "document_id",
loq.default = NA,
subject.default = NA,
info.default = NA,
ratio.data.to.dose = 0.001
))
debug(rename_columns)
system.time(PK.fit.table.1comp <- fit_all(
data.set = data,
model = "1compartment",
modelfun = "analytic",
compound.col = "analyte_name_original",
cas.col = "dsstox_casrn",
reference.col = "fk_reference_document_id",
species.col = "species",
species.weight.col = "weight_kg",
species.weight.units.default = "kg",
dose.col = "dose_level_normalized",
time.col = "time_hr",
time.units.default = "hr",
media.col = "conc_medium_normalized",
media.units.default = "normalized",
value.col = "conc",
units.default = NA,
route.col = "administration_route_normalized",
source.col = "document_id",
loq.default = NA,
subject.default = NA,
info.default = NA,
ratio.data.to.dose = 0.001
))
devtools::load_all(".")
system.time(PK.fit.table.1comp <- fit_all(
data.set = data,
model = "1compartment",
modelfun = "analytic",
compound.col = "analyte_name_original",
cas.col = "dsstox_casrn",
reference.col = "fk_reference_document_id",
species.col = "species",
species.weight.col = "weight_kg",
species.weight.units.default = "kg",
dose.col = "dose_level_normalized",
time.col = "time_hr",
time.units.default = "hr",
media.col = "conc_medium_normalized",
media.units.default = "normalized",
value.col = "conc",
units.default = NA,
route.col = "administration_route_normalized",
source.col = "document_id",
loq.default = NA,
subject.default = NA,
info.default = NA,
ratio.data.to.dose = 0.001
))
View(data)
system.time(PK.fit.table.1comp <- fit_all(
data.set = data,
model = "1compartment",
model_fun = "analytic",
compound_col = "analyte_name_original",
cas_col = "dsstox_casrn",
dtxsid_col = "dtsstox_substance_id"
reference_col = "fk_reference_document_id",
species_col = "species",
species_weight.col = "weight_kg",
species_weight.units.default = "kg",
dose_col = "dose_level_normalized",
time_col = "time_hr",
time_units_default = "hr",
media_col = "conc_medium_normalized",
media_units_default = "normalized",
conc_col = "conc",
conc_units_default = NA,
route_col = "administration_route_normalized",
source_col = "document_id",
loq_default = NA,
subject_default = NA,
info_default = NA,
ratio_data_to_dose = 0.001,
loq_default = NA,
loq_units_default= NA
))
devtools::load_all(".")
system.time(PK.fit.table.1comp <- fit_all(
data.set = data,
model = "1compartment",
modelfun = "analytic",
compound.col = "analyte_name_original",
cas.col = "dsstox_casrn",
reference.col = "fk_reference_document_id",
species.col = "species",
species.weight.col = "weight_kg",
species.weight.units.default = "kg",
dose.col = "dose_level_normalized",
time.col = "time_hr",
time.units.default = "hr",
media.col = "conc_medium_normalized",
media.units.default = "normalized",
value.col = "conc",
units.default = NA,
route.col = "administration_route_normalized",
source.col = "document_id",
loq.default = NA,
subject.default = NA,
info.default = NA,
ratio.data.to.dose = 0.001
))
debug(analzye_pk_data)
debug(analyze_pk_data)
devtools::load_all(".")
system.time(PK.fit.table.1comp <- fit_all(
data.set = data,
model = "1compartment",
modelfun = "analytic",
compound.col = "analyte_name_original",
cas.col = "dsstox_casrn",
reference.col = "fk_reference_document_id",
species.col = "species",
species.weight.col = "weight_kg",
species.weight.units.default = "kg",
dose.col = "dose_level_normalized",
time.col = "time_hr",
time.units.default = "hr",
media.col = "conc_medium_normalized",
media.units.default = "normalized",
value.col = "conc",
units.default = NA,
route.col = "administration_route_normalized",
source.col = "document_id",
loq.default = NA,
subject.default = NA,
info.default = NA,
ratio.data.to.dose = 0.001
))
View(DT)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(results = TRUE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
library(data.table)
library(readxl)
devtools::load_all(".")
### read in PK output files
pk_output_1comp_12212021 <- read.csv("inst/ext/PK.fit.table.1comp.12212021.csv")
pk_output_2comp_02102022 <- read.csv("inst/ext/PK.fit.table.2comp.02102022.csv")
pk_output_flat_02102022 <- read.csv("inst/ext/PK.fit.table.flat.02102022.csv")
pk_output_1comp_03012022 <- read.csv("inst/ext/PK.fit.table.1comp.03012022.csv")
pk_output_2comp_03012022<- read.csv("inst/ext/PK.fit.table.2comp.03012022.csv")
pk_output_flat_03012022 <- read.csv("inst/ext/PK.fit.table.flat.03012022.csv")
### read in processed raw data files
raw_1comp_12212021 <- read.csv("inst/ext/processed.1comp.data.12212021.csv")
raw_2comp_02102022 <- read.csv("inst/ext/processed.2comp.data.02102022.csv")
raw_flat_02102022 <- read.csv("inst/ext/processed.flat.data.02102022.csv")
raw_1comp_03012022 <- read.csv("inst/ext/processed.1comp.data.03012022.csv")
raw_2comp_03012022 <- read.csv("inst/ext/processed.2comp.data.03012022.csv")
raw_flat_03012022 <- read.csv("inst/ext/processed.flat.data.03012022.csv")
pk_lombardo <- read_xlsx("inst/ext/Supplemental_82966_revised_corrected.xlsx")
##################
##################
data1 <- pk_output_1comp_03012022 %>%
filter(param.value.type == "Fitted geometric mean" & AIC != Inf & Data.Analyzed != "Joint Analysis")
data2 <- pk_output_2comp_03012022 %>%
filter(param.value.type == "Fitted geometric mean" & AIC != Inf & Data.Analyzed != "Joint Analysis")
##################
##################
### assign new column, with either "1-Compartment" or "2-Compartment"
data1 <- subset(data1, select = sigma_value)
data1$model <- "1-Compartment"
data2 <- subset(data2, select = sigma_value)
data2$model <- "2-Compartment"
data <- rbind(data1, data2)
p <- ggplot(data = data,
mapping = aes(x = sigma_value)) +
geom_histogram(bins = 15) +
# geom_density() +
# scale_y_log10()+
scale_x_log10() +
theme_bw() +
labs(x = "Sigma",
y = "Number of observations") +
facet_wrap(.~ model)
# geom_vline(xintercept = 0.001476315)
# stat_function(fun = dlnorm, args = list(mean = mean(log(data$sigma_value)), sd = sd(log(data$sigma_value))))
p
##################
##################
data1 <- as.data.table(pk_output_1comp_03012022 %>%
filter(param.value.type == "Fitted geometric mean"))
data2 <- as.data.table(pk_output_2comp_03012022 %>%
filter(param.value.type == "Fitted geometric mean"))
##################
##################
### find data with repeated sigma_id values
find_rep_sigma <- function(data) {
data <- data[ ave(1:nrow(data), data$sigma_id, FUN=length) > 1 , ]
if(nrow(data) == 0) {
return(NULL)
} else {
return(data)
}
}
split_list_1 <- split(data1, data1$Compound)
rep_sigma_1 <- lapply(split_list_1, find_rep_sigma)
data1 <- do.call(rbind, rep_sigma_1)
data1 <- subset(data1, select = c(param.value.type, sigma_id, sigma_value, Data.Analyzed, Compound))
data1$Data.Analyzed[data1$Data.Analyzed != "Joint Analysis"] <- "Ind Analysis"
data1 <- data1 %>% pivot_wider(names_from = Data.Analyzed, values_from = sigma_value)
data1 <- data1 %>% filter(sigma_id != "sigma2.14")
data1$`Joint Analysis` <- as.numeric(data1$`Joint Analysis`)
View(data1)
data1$`Joint Analysis`
##################
##################
pk_data1 <- pk_output_1comp_03012022
pk_lombardo <- pk_lombardo
##################
##################
pk_data1 <- pk_data1 %>%
filter(param.value.type == "Fitted geometric mean", Species == "human")
pk_all <- left_join(pk_data1, pk_lombardo, by = c("CAS" = "CAS #"))
pk_all <- pk_all %>%
filter(!is.na(`human VDss (L/kg)`),
!is.na(`human CL (mL/min/kg)`))
### volume of distribution comparison
p1 <- ggplot(pk_all, aes(x = Vdist, y = `human VDss (L/kg)`)) +
geom_point() +
scale_x_log10() +
geom_abline(slope = 1, intercept = 0)
p1
### half-life comparision
p2 <- ggplot(pk_all, aes(x = halflife, y = `terminal  t1/2 (h)`)) +
geom_point() +
geom_abline(slope = 1, intercept = 0)
p2
### clearance comparison
### convert to same units
pk_all$`human CL (L/hr/kg)` <- pk_all$`human CL (mL/min/kg)` * 60 / 1000
p3 <- ggplot(data = pk_all, mapping = aes(x = CLtot, y = `human CL (L/hr/kg)`)) +
geom_point() +
scale_x_log10() +
geom_abline(slope = 1, intercept = 0)
p3
View(p3)
p3
p2
p1
pk_data1 <- pk_output_1comp_03012022
pk_lombardo <- pk_lombardo
pk_data1 <- pk_data1 %>%
filter(param.value.type == "Fitted geometric mean", Species == "human")
pk_all <- left_join(pk_data1, pk_lombardo, by = c("CAS" = "CAS #"))
View(pk_lombardo)
View(pk_data1)
pk_all <- left_join(pk_data1, pk_lombardo, by = c("CAS" = "CAS #"))
pk_all <- pk_all %>%
filter(!is.na(`human VDss (L/kg)`),
!is.na(`human CL (mL/min/kg)`))
View(pk_all)
pk_data1 <- pk_output_1comp_03012022
pk_lombardo <- pk_lombardo
pk_data1 <- pk_data1 %>%
filter(param.value.type == "Fitted geometric mean", Species == "human")
pk_all <- left_join(pk_data1, pk_lombardo, by = c("CAS" = "CAS #"))
View(pk_all)
pk_all <- pk_all %>%
filter(!is.na(`human VDss (L/kg)`),
!is.na(`human CL (mL/min/kg)`))
View(pk_all)
