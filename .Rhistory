### clearance comparison
### convert to same units
p3 <- ggplot(data = pk_all, mapping = aes(x = CLtot, y = `human CL (L/hr/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p3
p1
p2
p2
p1
View(pk_all)
##################
##################
pk_data1 <- pk_output_1comp_05092022
# pk_data1$Vdist <- log(pk_data1$Vdist)
pk_lombardo <- pk_lombardo
##################
##################
pk_data1 <- pk_data1 %>%
filter(param.value.type == "Fitted geometric mean", CAS != "50-49-7", CAS != "106266-06-2	")
# , Species == "human")
pk_all <- left_join(pk_data1, pk_lombardo, by = c("CAS" = "CAS #"))
pk_all <- pk_all %>%
filter(!is.na(`human VDss (L/kg)`),
!is.na(`human CL (mL/min/kg)`))
pk_all$`human CL (L/hr/kg)` <- pk_all$`human CL (mL/min/kg)` * 60 / 1000
pk_all$Vdist_norm <- abs(pk_all$Vdist / pk_all$`human VDss (L/kg)`)
pk_all$CLtot_norm <- abs(pk_all$CLtot / pk_all$`human CL (L/hr/kg)`)
pk_all$halflife_norm <- abs(pk_all$halflife / pk_all$`terminal  t1/2 (h)`)
pk_all$mae <- rowMeans(pk_all[, c("Vdist_norm", "CLtot_norm", "halflife_norm")])
### volume of distribution comparison
p1 <- ggplot(pk_all, aes(x = Vdist, y = `human VDss (L/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p1
### half-life comparision
p2 <- ggplot(pk_all, aes(x = halflife, y = `terminal  t1/2 (h)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p2
### clearance comparison
### convert to same units
p3 <- ggplot(data = pk_all, mapping = aes(x = CLtot, y = `human CL (L/hr/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p3
p1
p1
##################
##################
pk_data1 <- pk_output_1comp_05092022
# pk_data1$Vdist <- log(pk_data1$Vdist)
pk_lombardo <- pk_lombardo
##################
##################
pk_data1 <- pk_data1 %>%
filter(param.value.type == "Fitted geometric mean", CAS != "50-49-7", CAS != "106266-06-2")
# , Species == "human")
pk_all <- left_join(pk_data1, pk_lombardo, by = c("CAS" = "CAS #"))
pk_all <- pk_all %>%
filter(!is.na(`human VDss (L/kg)`),
!is.na(`human CL (mL/min/kg)`))
pk_all$`human CL (L/hr/kg)` <- pk_all$`human CL (mL/min/kg)` * 60 / 1000
pk_all$Vdist_norm <- abs(pk_all$Vdist / pk_all$`human VDss (L/kg)`)
pk_all$CLtot_norm <- abs(pk_all$CLtot / pk_all$`human CL (L/hr/kg)`)
pk_all$halflife_norm <- abs(pk_all$halflife / pk_all$`terminal  t1/2 (h)`)
pk_all$mae <- rowMeans(pk_all[, c("Vdist_norm", "CLtot_norm", "halflife_norm")])
### volume of distribution comparison
p1 <- ggplot(pk_all, aes(x = Vdist, y = `human VDss (L/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p1
### half-life comparision
p2 <- ggplot(pk_all, aes(x = halflife, y = `terminal  t1/2 (h)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p2
### clearance comparison
### convert to same units
p3 <- ggplot(data = pk_all, mapping = aes(x = CLtot, y = `human CL (L/hr/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p3
p1
##################
##################
pk_data1 <- pk_output_1comp_05092022
# pk_data1$Vdist <- log(pk_data1$Vdist)
pk_lombardo <- pk_lombardo
##################
##################
pk_data1 <- pk_data1 %>%
filter(param.value.type == "Fitted geometric mean")
# , CAS != "50-49-7", CAS != "106266-06-2")
# , Species == "human")
pk_all <- left_join(pk_data1, pk_lombardo, by = c("CAS" = "CAS #"))
pk_all <- pk_all %>%
filter(!is.na(`human VDss (L/kg)`),
!is.na(`human CL (mL/min/kg)`))
pk_all$`human CL (L/hr/kg)` <- pk_all$`human CL (mL/min/kg)` * 60 / 1000
pk_all$Vdist_norm <- abs(pk_all$Vdist / pk_all$`human VDss (L/kg)`)
pk_all$CLtot_norm <- abs(pk_all$CLtot / pk_all$`human CL (L/hr/kg)`)
pk_all$halflife_norm <- abs(pk_all$halflife / pk_all$`terminal  t1/2 (h)`)
pk_all$mae <- rowMeans(pk_all[, c("Vdist_norm", "CLtot_norm", "halflife_norm")])
### volume of distribution comparison
p1 <- ggplot(pk_all, aes(x = Vdist, y = `human VDss (L/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p1
### half-life comparision
p2 <- ggplot(pk_all, aes(x = halflife, y = `terminal  t1/2 (h)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p2
### clearance comparison
### convert to same units
p3 <- ggplot(data = pk_all, mapping = aes(x = CLtot, y = `human CL (L/hr/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p3
p1
p2
p3
raw_1comp_04142022 <- read.csv("inst/ext/processed.1comp.data.04142022.csv")
raw_2comp_04142022 <- read.csv("inst/ext/processed.2comp.data.04142022.csv")
raw_flat_04142022 <- read.csv("inst/ext/processed.flat.data.04142022.csv")
pk_output_1comp_04142022 <- read.csv("inst/ext/PK.fit.table.1comp.04142022.csv")
pk_output_2comp_04142022<- read.csv("inst/ext/PK.fit.table.2comp.04142022.csv")
pk_output_flat_04142022 <- read.csv("inst/ext/PK.fit.table.flat.04142022.csv")
##################
##################
pk_data1 <- pk_output_1comp_05092022
pk_data1 <- pk_output_1comp_04142022
# pk_data1$Vdist <- log(pk_data1$Vdist)
pk_lombardo <- pk_lombardo
##################
##################
pk_data1 <- pk_data1 %>%
filter(param.value.type == "Fitted geometric mean")
# , CAS != "50-49-7", CAS != "106266-06-2")
# , Species == "human")
pk_all <- left_join(pk_data1, pk_lombardo, by = c("CAS" = "CAS #"))
pk_all <- pk_all %>%
filter(!is.na(`human VDss (L/kg)`),
!is.na(`human CL (mL/min/kg)`))
pk_all$`human CL (L/hr/kg)` <- pk_all$`human CL (mL/min/kg)` * 60 / 1000
pk_all$Vdist_norm <- abs(pk_all$Vdist / pk_all$`human VDss (L/kg)`)
pk_all$CLtot_norm <- abs(pk_all$CLtot / pk_all$`human CL (L/hr/kg)`)
pk_all$halflife_norm <- abs(pk_all$halflife / pk_all$`terminal  t1/2 (h)`)
pk_all$mae <- rowMeans(pk_all[, c("Vdist_norm", "CLtot_norm", "halflife_norm")])
### volume of distribution comparison
p1 <- ggplot(pk_all, aes(x = Vdist, y = `human VDss (L/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p1
### half-life comparision
p2 <- ggplot(pk_all, aes(x = halflife, y = `terminal  t1/2 (h)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p2
### clearance comparison
### convert to same units
p3 <- ggplot(data = pk_all, mapping = aes(x = CLtot, y = `human CL (L/hr/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p3
p1
pk_output_1comp_04282022 <- read.csv("inst/ext/PK.fit.table.1comp.04282022.csv")
pk_output_2comp_04282022<- read.csv("inst/ext/PK.fit.table.2comp.04282022.csv")
pk_output_2comp_04282022<- read.csv("inst/ext/PK.fit.table.2comp.04282022.csv")
pk_output_flat_04282022 <- read.csv("inst/ext/PK.fit.table.flat.04282022.csv")
raw_1comp_04282022 <- read.csv("inst/ext/processed.1comp.data.04282022.csv")
raw_2comp_04282022 <- read.csv("inst/ext/processed.2comp.data.04282022.csv")
raw_2comp_04282022 <- read.csv("inst/ext/processed.2comp.data.04282022.csv")
raw_flat_04282022 <- read.csv("inst/ext/processed.flat.data.04282022.csv")
##################
##################
pk_data1 <- pk_output_1comp_05092022
pk_data1 <- pk_output_1comp_04282022
# pk_data1$Vdist <- log(pk_data1$Vdist)
pk_lombardo <- pk_lombardo
##################
##################
pk_data1 <- pk_data1 %>%
filter(param.value.type == "Fitted geometric mean")
# , CAS != "50-49-7", CAS != "106266-06-2")
# , Species == "human")
pk_all <- left_join(pk_data1, pk_lombardo, by = c("CAS" = "CAS #"))
pk_all <- pk_all %>%
filter(!is.na(`human VDss (L/kg)`),
!is.na(`human CL (mL/min/kg)`))
pk_all$`human CL (L/hr/kg)` <- pk_all$`human CL (mL/min/kg)` * 60 / 1000
pk_all$Vdist_norm <- abs(pk_all$Vdist / pk_all$`human VDss (L/kg)`)
pk_all$CLtot_norm <- abs(pk_all$CLtot / pk_all$`human CL (L/hr/kg)`)
pk_all$halflife_norm <- abs(pk_all$halflife / pk_all$`terminal  t1/2 (h)`)
pk_all$mae <- rowMeans(pk_all[, c("Vdist_norm", "CLtot_norm", "halflife_norm")])
### volume of distribution comparison
p1 <- ggplot(pk_all, aes(x = Vdist, y = `human VDss (L/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p1
### half-life comparision
p2 <- ggplot(pk_all, aes(x = halflife, y = `terminal  t1/2 (h)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p2
### clearance comparison
### convert to same units
p3 <- ggplot(data = pk_all, mapping = aes(x = CLtot, y = `human CL (L/hr/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p3
p2
p1
View(pk_output_1comp_04282022)
devtools::load_all(".")
# data <- read.csv("inst/ext/cvt_query_for_john_27may2021_v2.csv")
# data <- read.csv("inst/ext/cvtdb_invivopkfit_02242022.csv")
# data <- read.csv("inst/ext/cvtdb_invivopkfit_04142022.csv")
data <- read.csv("inst/ext/cvtdb_invivopkfit_04262022.csv")
# data <- read.csv("inst/ext/cvt_query_for_john_27may2021_v2.csv")
# data <- read.csv("inst/ext/cvtdb_invivopkfit_02242022.csv")
# data <- read.csv("inst/ext/cvtdb_invivopkfit_04142022.csv")
data <- read.csv("inst/ext/cvtdb_invivopkfit_04262022.csv")
data <- data %>%
filter(analyte_name_original != "Methemoglobin") %>%
filter(analyte_name_original != "N-desmethyltamoxifen")
### fix compound names
data$analyte_name_original[data$analyte_name_original == "Methyleugonal "] <- "Methyleugonal"
data$analyte_name_original[data$analyte_name_original == "benzo[a]pyrene"] <- "benzo(a)pyrene"
data$analyte_name_original[data$analyte_name_original == "2,4-D"] <- "2,4-Dichlorophenoxyacetic acid"
data$analyte_name_original[data$analyte_name_original == "Diclofenac"] <- "Hexobarbital"
data$analyte_name_original[data$analyte_name_original == "Pentadecafluorooctanoic acid"] <- "Perfluorooctanoic acid"
### make fk_reference_document equal fk_extraction document if fk_reference_document is NULL
data$fk_reference_document_id[data$fk_reference_document_id == "NULL"] <- data$fk_extraction_document_id[data$fk_reference_document_id == "NULL"]
### do 1-Compartment fit
system.time(PK.fit.table.1comp <- fit_all(
data.set = data,
model = "1compartment",
modelfun = "analytic",
compound.col = "analyte_name_original",
cas.col = "dsstox_casrn",
reference.col = "fk_reference_document_id",
species.col = "species",
species.weight.col = "weight_kg",
species.weight.units.default = "kg",
dose.col = "dose_level_normalized",
time.col = "time_hr",
time.units.default = "hr",
media.col = "conc_medium_normalized",
media.units.default = "normalized",
value.col = "conc",
units.default = NA,
route.col = "administration_route_normalized",
source.col = "document_id",
loq.default = NA,
subject.default = NA,
info.default = NA
))
p2
p1
pk_data1 <- pk_output_1comp_05092022
pk_lombardo <- pk_lombardo
pk_data1 <- pk_data1 %>%
filter(param.value.type == "Fitted geometric mean")
pk_all <- pk_all %>%
filter(!is.na(`human VDss (L/kg)`),
!is.na(`human CL (mL/min/kg)`))
pk_all$Vdist_norm <- abs(pk_all$Vdist / pk_all$`human VDss (L/kg)`)
pk_all$halflife_norm <- abs(pk_all$halflife / pk_all$`terminal  t1/2 (h)`)
pk_all$mae <- rowMeans(pk_all[, c("Vdist_norm", "CLtot_norm", "halflife_norm")])
### volume of distribution comparison
p1 <- ggplot(pk_all, aes(x = Vdist, y = `human VDss (L/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p1
### half-life comparision
p2 <- ggplot(pk_all, aes(x = halflife, y = `terminal  t1/2 (h)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p3 <- ggplot(data = pk_all, mapping = aes(x = CLtot, y = `human CL (L/hr/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p3
p2
pk_data1 <- pk_output_1comp_05092022
### this block reads the exported model fit csv files from run_invivoPKfit
### read in PK output files
# pk_output_1comp_12212021 <- read.csv("inst/ext/PK.fit.table.1comp.12212021.csv")
# pk_output_2comp_02102022 <- read.csv("inst/ext/PK.fit.table.2comp.02102022.csv")
# pk_output_flat_02102022 <- read.csv("inst/ext/PK.fit.table.flat.02102022.csv")
# pk_output_1comp_03012022 <- read.csv("inst/ext/PK.fit.table.1comp.03012022.csv")
# pk_output_2comp_03012022<- read.csv("inst/ext/PK.fit.table.2comp.03012022.csv")
# pk_output_flat_03012022 <- read.csv("inst/ext/PK.fit.table.flat.03012022.csv")
pk_output_1comp_04282022 <- read.csv("inst/ext/PK.fit.table.1comp.04282022.csv")
pk_output_2comp_04282022<- read.csv("inst/ext/PK.fit.table.2comp.04282022.csv")
pk_output_flat_04282022 <- read.csv("inst/ext/PK.fit.table.flat.04282022.csv")
pk_output_2comp_05092022 <- read.csv("inst/ext/PK.fit.table.2comp.05092022.csv")
pk_output_flat_05092022 <- read.csv("inst/ext/PK.fit.table.flat.05092022.csv")
pk_output_1comp_05092022 <- read.csv("inst/ext/PK.fit.table.1comp.05092022.csv")
### read in processed raw data files
# raw_1comp_12212021 <- read.csv("inst/ext/processed.1comp.data.12212021.csv")
# raw_2comp_02102022 <- read.csv("inst/ext/processed.2comp.data.02102022.csv")
# raw_flat_02102022 <- read.csv("inst/ext/processed.flat.data.02102022.csv")
# raw_1comp_03012022 <- read.csv("inst/ext/processed.1comp.data.03012022.csv")
# raw_2comp_03012022 <- read.csv("inst/ext/processed.2comp.data.03012022.csv")
# raw_flat_03012022 <- read.csv("inst/ext/processed.flat.data.03012022.csv")
# raw_1comp_04142022 <- read.csv("inst/ext/processed.1comp.data.04142022.csv")
# raw_2comp_04142022 <- read.csv("inst/ext/processed.2comp.data.04142022.csv")
# raw_flat_04142022 <- read.csv("inst/ext/processed.flat.data.04142022.csv")
raw_1comp_04282022 <- read.csv("inst/ext/processed.1comp.data.04282022.csv")
raw_2comp_04282022 <- read.csv("inst/ext/processed.2comp.data.04282022.csv")
raw_flat_04282022 <- read.csv("inst/ext/processed.flat.data.04282022.csv")
raw_1comp_05092022 <- read.csv("inst/ext/processed.1comp.data.05092022.csv")
raw_2comp_05092022 <- read.csv("inst/ext/processed.2comp.data.05092022.csv")
raw_flat_05092022 <- read.csv("inst/ext/processed.flat.data.05092022.csv")
pk_lombardo <- read_xlsx("inst/ext/Supplemental_82966_revised_corrected.xlsx")
##################
##################
pk_data1 <- pk_output_1comp_05092022
# pk_data1 <- pk_output_1comp_04282022
# pk_data1$Vdist <- log(pk_data1$Vdist)
pk_lombardo <- pk_lombardo
##################
##################
pk_data1 <- pk_data1 %>%
filter(param.value.type == "Fitted geometric mean")
# , CAS != "50-49-7", CAS != "106266-06-2")
# , Species == "human")
pk_all <- left_join(pk_data1, pk_lombardo, by = c("CAS" = "CAS #"))
pk_all <- pk_all %>%
filter(!is.na(`human VDss (L/kg)`),
!is.na(`human CL (mL/min/kg)`))
pk_all$`human CL (L/hr/kg)` <- pk_all$`human CL (mL/min/kg)` * 60 / 1000
pk_all$Vdist_norm <- abs(pk_all$Vdist / pk_all$`human VDss (L/kg)`)
pk_all$CLtot_norm <- abs(pk_all$CLtot / pk_all$`human CL (L/hr/kg)`)
pk_all$halflife_norm <- abs(pk_all$halflife / pk_all$`terminal  t1/2 (h)`)
pk_all$mae <- rowMeans(pk_all[, c("Vdist_norm", "CLtot_norm", "halflife_norm")])
### volume of distribution comparison
p1 <- ggplot(pk_all, aes(x = Vdist, y = `human VDss (L/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p1
### half-life comparision
p2 <- ggplot(pk_all, aes(x = halflife, y = `terminal  t1/2 (h)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p2
### clearance comparison
### convert to same units
p3 <- ggplot(data = pk_all, mapping = aes(x = CLtot, y = `human CL (L/hr/kg)`)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
geom_abline(slope = 1, intercept = 0)
p3
p2
p1
p1
p2
p3
class(mtcars) <- c("my_new_class", "data.frame")
class(mtcars)
devtools::load_all(".")
# data <- read.csv("inst/ext/cvt_query_for_john_27may2021_v2.csv")
# data <- read.csv("inst/ext/cvtdb_invivopkfit_02242022.csv")
# data <- read.csv("inst/ext/cvtdb_invivopkfit_04142022.csv")
data <- read.csv("inst/ext/cvtdb_invivopkfit_04262022.csv")
data <- data %>%
filter(analyte_name_original != "Methemoglobin") %>%
filter(analyte_name_original != "N-desmethyltamoxifen")
### fix compound names
data$analyte_name_original[data$analyte_name_original == "Methyleugonal "] <- "Methyleugonal"
data$analyte_name_original[data$analyte_name_original == "benzo[a]pyrene"] <- "benzo(a)pyrene"
data$analyte_name_original[data$analyte_name_original == "2,4-D"] <- "2,4-Dichlorophenoxyacetic acid"
data$analyte_name_original[data$analyte_name_original == "Diclofenac"] <- "Hexobarbital"
# data <- read.csv("inst/ext/cvt_query_for_john_27may2021_v2.csv")
# data <- read.csv("inst/ext/cvtdb_invivopkfit_02242022.csv")
# data <- read.csv("inst/ext/cvtdb_invivopkfit_04142022.csv")
data <- read.csv("inst/ext/cvtdb_invivopkfit_04262022.csv")
data <- data %>%
filter(analyte_name_original != "Methemoglobin") %>%
filter(analyte_name_original != "N-desmethyltamoxifen")
### fix compound names
data$analyte_name_original[data$analyte_name_original == "Methyleugonal "] <- "Methyleugonal"
data$analyte_name_original[data$analyte_name_original == "benzo[a]pyrene"] <- "benzo(a)pyrene"
data$analyte_name_original[data$analyte_name_original == "2,4-D"] <- "2,4-Dichlorophenoxyacetic acid"
data$analyte_name_original[data$analyte_name_original == "Diclofenac"] <- "Hexobarbital"
data$analyte_name_original[data$analyte_name_original == "Pentadecafluorooctanoic acid"] <- "Perfluorooctanoic acid"
data$analyte_name_original[data$analyte_name_original] == "3−hydroxybenzo[a]pyrene" <- "3−hydroxybenzo(a)pyrene"
data$analyte_name_original[data$analyte_name_original] == "3−hydroxybenzo[a]pyrene"] <- "3−hydroxybenzo(a)pyrene"
data$analyte_name_original[data$analyte_name_original == "3−hydroxybenzo[a]pyrene"] <- "3−hydroxybenzo(a)pyrene"
### make fk_reference_document equal fk_extraction document if fk_reference_document is NULL
data$fk_reference_document_id[data$fk_reference_document_id == "NULL"] <- data$fk_extraction_document_id[data$fk_reference_document_id == "NULL"]
system.time(PK.fit.table.1comp <- fit_all(
data.set = data,
model = "1compartment",
modelfun = "analytic",
compound.col = "analyte_name_original",
cas.col = "dsstox_casrn",
reference.col = "fk_reference_document_id",
species.col = "species",
species.weight.col = "weight_kg",
species.weight.units.default = "kg",
dose.col = "dose_level_normalized",
time.col = "time_hr",
time.units.default = "hr",
media.col = "conc_medium_normalized",
media.units.default = "normalized",
value.col = "conc",
units.default = NA,
route.col = "administration_route_normalized",
source.col = "document_id",
loq.default = NA,
subject.default = NA,
info.default = NA
))
system.time(PK.fit.table.2comp <- fit_all(
data.set = data,
model = "2compartment",
modelfun = "analytic",
compound.col = "analyte_name_original",
cas.col = "dsstox_casrn",
reference.col = "fk_reference_document_id",
species.col = "species",
species.weight.col = "weight_kg",
species.weight.units.default = "kg",
dose.col = "dose_level_normalized",
time.col = "time_hr",
time.units.default = "hr",
media.col = "conc_medium_normalized",
media.units.default = "normalized",
value.col = "conc",
units.default = NA,
route.col = "administration_route_normalized",
source.col = "document_id",
loq.default = NA,
subject.default = NA,
info.default = NA
))
data <- data %>%
filter(Species != "Hamster")
filter(species != "Hamster")
data <- data %>% filter(Species != "Hamster")
View(data)
data <- data %>% filter(species != "Hamster")
system.time(PK.fit.table.2comp <- fit_all(
data.set = data,
model = "2compartment",
modelfun = "analytic",
compound.col = "analyte_name_original",
cas.col = "dsstox_casrn",
reference.col = "fk_reference_document_id",
species.col = "species",
species.weight.col = "weight_kg",
species.weight.units.default = "kg",
dose.col = "dose_level_normalized",
time.col = "time_hr",
time.units.default = "hr",
media.col = "conc_medium_normalized",
media.units.default = "normalized",
value.col = "conc",
units.default = NA,
route.col = "administration_route_normalized",
source.col = "document_id",
loq.default = NA,
subject.default = NA,
info.default = NA
))
devtools::load_all(".")
